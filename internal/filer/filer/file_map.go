// Code generated by github.com/gobuffalo/mapgen. DO NOT EDIT.

package filer

import (
	"sort"
	"sync"
)

// fileMap wraps sync.Map and uses the following types:
// key:   string
// value: *File
type fileMap struct {
	data *sync.Map
}

func newFileMap() *fileMap {
	return &fileMap{
		data: &sync.Map{},
	}
}

// Delete the key from the map
func (m *fileMap) Delete(key string) {
	m.data.Delete(key)
}

// Load the key from the map.
// Returns *File or bool.
// A false return indicates either the key was not found
// or the value is not of type *File
func (m *fileMap) Load(key string) (*File, bool) {
	i, ok := m.data.Load(key)
	if !ok {
		return nil, false
	}
	s, ok := i.(*File)
	return s, ok
}

// LoadOrStore will return an existing key or
// store the value if not already in the map
func (m *fileMap) LoadOrStore(key string, value *File) (*File, bool) {
	i, _ := m.data.LoadOrStore(key, value)
	s, ok := i.(*File)
	return s, ok
}

// LoadOr will return an existing key or
// run the function and store the results
func (m *fileMap) LoadOr(key string, fn func(*fileMap) (*File, bool)) (*File, bool) {
	i, ok := m.Load(key)
	if ok {
		return i, ok
	}
	i, ok = fn(m)
	if ok {
		m.Store(key, i)
		return i, ok
	}
	return i, false
}

// Range over the *File values in the map
func (m *fileMap) Range(f func(key string, value *File) bool) {
	m.data.Range(func(k, v interface{}) bool {
		key, ok := k.(string)
		if !ok {
			return false
		}
		value, ok := v.(*File)
		if !ok {
			return false
		}
		return f(key, value)
	})
}

// Store a *File in the map
func (m *fileMap) Store(key string, value *File) {
	m.data.Store(key, value)
}

// Keys returns a list of keys in the map
func (m *fileMap) Keys() []string {
	var keys []string
	m.Range(func(key string, value *File) bool {
		keys = append(keys, key)
		return true
	})
	sort.Strings(keys)
	return keys
}
